options {
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(LangParser)
import java.io.*;

public class LangParser {
	public static void main(String args[]) throws Exception {
		InputStream is;
		if(args.length < 1) {
			is = System.in;
		} else {
			is = new FileInputStream(args[0]);
		}

		LangParser parser = new LangParser(is);
		parser.Program();
	}
}
PARSER_END(LangParser)

/* WHITE SPACE */
SKIP :
{
	  " "
	| "\t"
	| "\n"
	| "\r"
}

/* COMMENTS */
MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
	<~[]>
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
	// date types
	  <INT: "int">
	| <FLOAT: "float">
	| <BOOLEAN: "boolean">
	| <STRING: "String">

	// literals
	| <TRUE: "True">
	| <FALSE: "False">

	// "functions"
	| <READ: "read">
	| <WRITE: "write">

	// other constructs
	| <IF: "if">
	| <THEN: "then">
	| <ELSE: "else">
	| <FOR: "for">
	| <BEGIN: "begin">
	| <END: "end">
}

/* LITERALS */
TOKEN :
{
	  <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])*) | "0">
	| <FLOATING_POINT_LITERAL:
		  (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
		| (["0"-"9"])+ <EXPONENT>
	  >
	| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| <STRING_LITERAL: "\"" (~["\""])* "\"">
}

/* IDENTIFIERS */
TOKEN :
{
	<IDENTIFIER: <LETTER> (<PART_LETTER>)*>
	| <#LETTER: ["a"-"z", "A"-"Z", "_"]>
	| <#PART_LETTER: ["0"-"9", "a"-"z", "A"-"Z", "_"]>
}

/* SEPARATORS */
TOKEN :
{
	  <LPAREN: "(">
	| <RPAREN: ")">
	| <SEMICOLON: ";">
	| <COMMA: ",">
}

/* OPERATORS */
TOKEN :
{
	  <ASSIGN: "=">
	| <DOT: ".">
	| <GT: ">">
	| <LT: "<">
	| <BANG: "!">
	| <HOOK: "?">
	| <COLON: ":">
	| <EQ: "==">
	| <LE: "<=">
	| <GE: ">=">
	| <NE: "!=">
	| <SC_OR: "||">
	| <SC_AND: "&&">
	| <PLUS: "+">
	| <MINUS: "-">
	| <STAR: "*">
	| <SLASH: "/">
	| <DIV: "%">
}

// GRAMMAR
void Program() :
{}
{
	Statements()
	<EOF>
}

void Statements():
{}
{
	(Statement())+
}

/*
 * Declaration syntax follows.
 */
void VariableDeclaratorId() :
{}
{
	<IDENTIFIER>
}

/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
	  <BOOLEAN>
	| <INT>
	| <FLOAT>
	| <STRING>
}

/*
 * Expression syntax follows.
 */

void Expression() :
{}
{
	  LOOKAHEAD(VariableDeclaratorId() "=") Assignment()
	| ConditionalExpression()
}

void Assignment() :
{}
{
	VariableDeclaratorId() "=" Expression()
}

void ConditionalExpression() :
{}
{
	ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
	ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
	EqualityExpression() ( "&&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
	RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}

void RelationalExpression() :
{}
{
	AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
	MultiplicativeExpression() ( ( "+" | "-" | "." ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
	UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
	  ( "-" ) UnaryExpression() | "!" UnaryExpression() | PrimaryPrefix()
}

void UnaryExpressionNotPlusMinus() :
{}
{
	  ( "!" ) UnaryExpression()
	| PrimaryPrefix()
}

void PrimaryPrefix() :
{}
{
	  Literal()
	| VariableDeclaratorId()
	| "(" Expression() ")"
}

void Literal() :
{}
{
	  <INTEGER_LITERAL>
	| <FLOATING_POINT_LITERAL>
	| <STRING_LITERAL>
	| <TRUE>
	| <FALSE>
}

/*
 * Statement syntax follows.
 */
void Statement() :
{}
{
	  ";"
	| LocalVariableDeclaration() ";"
	| IfStatement()
	| ForStatement()
	| WriteStatement()
	| ReadStatement()
	| Expression() ";"
}

void LocalVariableDeclaration() :
{}
{
	Type() VariableDeclaratorId() ( "," VariableDeclaratorId() )*
}

void IfStatement() :
{}
{
	"if" Expression() <THEN> Statements() [ <ELSE> Statements() ] <END> ";"
}

void ForStatement() :
{}
{
	"for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")"
	<BEGIN>
	Statements()
	<END>";"
}

void ForInit() :
{}
{
	  LOOKAHEAD(Type() <IDENTIFIER>) LocalVariableDeclaration()
	| StatementExpressionList()
}

void StatementExpressionList() :
{}
{
	Expression() ( "," Expression() )*
}

void ForUpdate() :
{}
{
	StatementExpressionList()
}

// IO Commands
void WriteStatement() :
{}
{
	"write" StatementExpressionList() ";"
}

void ReadStatement() :
{}
{
	"read" StatementExpressionList() ";"
}