options {
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(LangParser)
package lang.parser;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
import lang.ir.*;

public class LangParser {
	public static void main(String args[]) throws Exception {
		InputStream is;
		if(args.length < 1) {
			is = System.in;
		} else {
			is = new FileInputStream(args[0]);
		}

		LangParser parser = new LangParser(is);
		parser.Program();
	}
}
PARSER_END(LangParser)

/* WHITE SPACE */
SKIP :
{
	  " "
	| "\t"
	| "\n"
	| "\r"
}

/* COMMENTS */
MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
	<~[]>
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
	// date types
	  <INT: "int">
	| <FLOAT: "float">
	| <BOOLEAN: "boolean">
	| <STRING: "String">

	// literals
	| <TRUE: "True">
	| <FALSE: "False">

	// "functions"
	| <READ: "read">
	| <WRITE: "write">

	// other constructs
	| <IF: "if">
	| <THEN: "then">
	| <ELSE: "else">
	| <FOR: "for">
	| <BEGIN: "begin">
	| <END: "end">
}

/* LITERALS */
TOKEN :
{
	  <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])*) | "0">
	| <FLOATING_POINT_LITERAL:
		  (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
		| (["0"-"9"])+ <EXPONENT>
	  >
	| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| <STRING_LITERAL: "\"" (~["\""])* "\"">
}

/* IDENTIFIERS */
TOKEN :
{
	<IDENTIFIER: <LETTER> (<PART_LETTER>)*>
	| <#LETTER: ["a"-"z", "A"-"Z", "_"]>
	| <#PART_LETTER: ["0"-"9", "a"-"z", "A"-"Z", "_"]>
}

/* SEPARATORS */
TOKEN :
{
	  <LPAREN: "(">
	| <RPAREN: ")">
	| <SEMICOLON: ";">
	| <COMMA: ",">
}

/* OPERATORS */
TOKEN :
{
	  <ASSIGN: "=">
	| <DOT: ".">
	| <GT: ">">
	| <LT: "<">
	| <BANG: "!">
	| <HOOK: "?">
	| <COLON: ":">
	| <EQ: "==">
	| <LE: "<=">
	| <GE: ">=">
	| <NE: "!=">
	| <SC_OR: "||">
	| <SC_AND: "&&">
	| <PLUS: "+">
	| <MINUS: "-">
	| <STAR: "*">
	| <SLASH: "/">
	| <DIV: "%">
}

// GRAMMAR
BlockOfStatements Program() :
{}
{
	{return Statements(); }
	<EOF>
}

BlockOfStatements Statements():
{
	BlockOfStatements statements = new BlockOfStatements();
	Statement s;
}
{
	(
		s = Statement()
		{
			if(s != null) {
				statements.getStatements().add(s);
			}
		}
	)+

	{return statements;}
}

/*
 * Declaration syntax follows.
 */
Variable VariableDeclaratorId() :
{
	Token tok;
}
{
	tok = <IDENTIFIER>
	{return new Variable(tok.toString());}
}

/*
 * Type, name and expression syntax follows.
 */

Type Type() :
{}
{
	  <BOOLEAN> {return Type.BOOLEAN;}
	| <INT> {return Type.INT;}
	| <FLOAT> {return Type.FLOAT;}
	| <STRING> {return Type.STRING;}
}

/*
 * Expression syntax follows.
 */

Expression Expression() :
{
	Expression expr = null;
}
{
	  (LOOKAHEAD(VariableDeclaratorId() "=") expr = Assignment()
	| expr = ConditionalExpression())

	{ return expr; }
}

AssignmentExpression Assignment() :
{
	Expression expr;
	Variable var;
}
{
	var = VariableDeclaratorId() "=" expr = Expression()
	{return new AssignmentExpression(var, expr);}
}

Expression ConditionalExpression() :
{
	Expression expr = null;
}
{
	expr = ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
	{return expr;}
}

Expression ConditionalOrExpression() :
{
	Expression expr = null;
}
{
	expr = ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
	{return expr;}
}

Expression ConditionalAndExpression() :
{
	Expression expr = null;
}
{
	expr = EqualityExpression() ( "&&" EqualityExpression() )*
	{return expr;}
}

Expression EqualityExpression() :
{
	Expression expr = null;
}
{
	expr = RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
	{return expr;}
}

Expression RelationalExpression() :
{
	Expression expr = null;
}
{
	expr = AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
	{return expr;}
}

Expression AdditiveExpression() :
{
	Expression expr = null, expr2;
	Token tok;
}
{
	expr = MultiplicativeExpression()
	(
		(tok = "+" | tok = "-" | tok = ".")
		expr2 = MultiplicativeExpression()

		{expr = new BinaryExpression(expr, tok.toString(), expr2);}
	)*
	{return expr;}
}

Expression MultiplicativeExpression() :
{
	Expression expr = null, expr2;
	Token tok;
}
{
	expr = UnaryExpression()
	(
		(tok = "*" | tok = "/" | tok = "%" )
		expr2 = UnaryExpression()

		{expr = new BinaryExpression(expr, tok.toString(), expr2);}
	)*
	{return expr;}
}

Expression UnaryExpression() :
{
	Expression expr = null;
	Token tok;
}
{
	  (
			(tok = "-" | tok = "!")
			expr = UnaryExpression()
			{expr = new UnaryExpression(tok.toString(), expr);}
		|
			expr = PrimaryPrefix()
	  )
	  {return expr;}
}

Expression UnaryExpressionNotPlusMinus() :
{
	Expression expr = null;
}
{
	(  ( "!" ) UnaryExpression()
	| expr = PrimaryPrefix())

	{return expr;}
}

Expression PrimaryPrefix() :
{
	Expression expr = null;
	String name;
}
{
	(
			expr = Literal()
		|
			expr = VariableDeclaratorId()
		| "(" expr = Expression() ")"
	)

	{return expr;}
}

Constant Literal() :
{
	Token token;
	Constant c = null;
}
{
	(
	    token = <INTEGER_LITERAL>
        {c = new Constant(token.toString(), Type.INT);}
	|
	    token = <FLOATING_POINT_LITERAL>
	    {c = new Constant(token.toString(), Type.FLOAT);}
	|
	    token = <STRING_LITERAL>
	    {c = new Constant(token.toString(), Type.STRING);}
	|
	    (token = <TRUE> | token = <FALSE>)
        {c = new Constant(token.toString().equalsIgnoreCase("true"), Type.BOOLEAN);}
	)

	{return c;}
}

/*
 * Statement syntax follows.
 */
Statement Statement() :
{
	Statement s = null;
	Expression expr;
}
{
	(
		  ";"
	| s = LocalVariableDeclaration() ";"
	| IfStatement()
	| ForStatement()
	| s = WriteStatement()
	| s = ReadStatement()
	| expr = Expression() ";" {return new ExpressionStatement(expr);}

)
	{
		return s;
		/*PrintStatement s = new PrintStatement();
		s.getExpressions().add(new Constant(1, Type.INT));
		return s;*/
	}
}

VariableDeclaration LocalVariableDeclaration() :
{
    VariableDeclaration decl;
    Variable var;
    Type type;
}
{
	type = Type()
	var = VariableDeclaratorId()
	{decl = new VariableDeclaration(type, var);}
	(
	 ","
	 var = VariableDeclaratorId()
	 {decl.getVariables().add(var);}
	)*
	{return decl;}
}

void IfStatement() :
{}
{
	"if" Expression() <THEN> Statements() [ <ELSE> Statements() ] <END> ";"
}

void ForStatement() :
{}
{
	"for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")"
	<BEGIN>
	Statements()
	<END>";"
}

void ForInit() :
{}
{
	ExpressionList()
}

List<Expression> ExpressionList() :
{
    List<Expression> exprs = new ArrayList<Expression>();
    Expression expr;
}
{
	expr = Expression()
	{exprs.add(expr);}

	(
	    ","
	    expr = Expression()
	    {exprs.add(expr);}
	)*

	{return exprs;}
}

void ForUpdate() :
{}
{
	ExpressionList()
}

// IO Commands
WriteStatement WriteStatement() :
{
	WriteStatement s = new WriteStatement();
	List<Expression> expressions;
}
{
	"write"
	expressions = ExpressionList()
	 ";"

	{
		s.getExpressions().addAll(expressions);
		return s;
	}
}

List<Variable> VariableList():
{
    Variable var;
    List<Variable> vars = new ArrayList<Variable>();
}
{
    var = VariableDeclaratorId()
    {vars.add(var);}

    (
        ","
        var = VariableDeclaratorId()
        {vars.add(var);}
    )*
    {return vars;}
}

ReadStatement ReadStatement() :
{
    ReadStatement s = new ReadStatement();
    List<Variable> vars;
}
{
	"read"
	vars = VariableList()
	";"

	{
	    s.getVariables().addAll(vars);
	    return s;
	}
}